<%- include('./partials/head'); %>
  <body>
	<%- include("./partials/menu"); %>
    <div id="chat-container">
      <div id="search-container">
        <input type="text" placeholder="Search" id="search-conversation"/>
		<a  onclick="clearSearchResults('<%= loggedInUser.userName %>')" href="#" id="clear-search" /> Clear Search Filter  </a>
      </div>
      <div id="conversation-list">
        <% data.forEach(function(conversation) { %>
          <!-- conversation creator is same to logged in user, so we need to show participant name and avatar -->
          <% if(conversation.creator.id == loggedInUser.userId) { %>
            <div class="conversation" onclick="getMessages('<%= conversation._id %>', '<%= conversation.participant.name %>')">
              <% if (conversation.participant.avatar) { %>
              <img src="./uploads/avatar/<%= conversation.participant.avatar %>" alt="<%= conversation.participant.name %>" />
              <% } else { %>
                <img src="./images/nophoto.png" />
              <% } %>
              <div class="title-text"><%= conversation.participant.name %></div>
              <div class="conversation-date"><%= moment(conversation.last_updated).fromNow() %></div>
            </div>
          <% } else { %>
            <div class="conversation" onclick="getMessages('<%= conversation._id %>', '<%= conversation.creator.name %>')">
              <% if (conversation.creator.avatar) { %>
              <img src="./uploads/avatar/<%= conversation.creator.avatar %>" alt="<%= conversation.creator.name %>" />
              <% } else { %>
                <img src="./images/nophoto.png" />
              <% } %>
              <div class="title-text"><%= conversation.creator.name %></div>
              <div class="conversation-date"><%= moment(conversation.last_updated).fromNow() %></div>
            </div>
          <% } %>
        <% }); %>
        
        <!-- show no conversation placeholder image for 0 conversations -->
        <% if(data && data.length === 0) { %>
          <div class="nothing"><img src="./images/no-conversation.svg"></div>
        <% } %>
      </div>

      <div class="new-message-container" onclick="openModal()">
        <a href="#">+</a>
      </div>

      <div id="chat-title" >
        <span id="conversation-partner"></span>
        <img class="deleteConv hide" src="./images/trash.png" alt="Delete Conversation" />
      </div>

      <!-- placeholder div if no messages are in messages area -->
      <div id="chat-message-list">
        <div class="nothing">select a conversation</div>
      </div>

      <!-- send message form -->
      <form id="chat-form" method="post" enctype="multipart/form-data">
        <label for="attachment"><img src="./images/attachment.png" alt="Add Attachment" /></label>
        <input type="file" multiple name="attachment" class="hide" id="attachment" />
        <input type="text" name="message" placeholder="Type a message" autocomplete="off" />
      </form>

    </div>
    <%- include('./partials/add-conversation-modal.ejs'); %>

    <!-- import socket io client from cdn -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.3/socket.io.min.js"></script>

    <script>

      const form = document.querySelector('#chat-form');
      const messageContainer = document.querySelector('#chat-message-list');
      const chatTitleContainer = document.querySelector('#conversation-partner');
      const loggedinUserId = '<%= loggedInUser.userId %>';
      const loggedinUserName = '<%= loggedInUser.userName %>';
	  const deleteIcon = document.querySelector(".deleteConv");
      let participant = null; // selected conversation participant object
      let current_conversation_id; // selected conversation id
	  const clearSearch = document.querySelector("#clear-search");

      // socket initialization
      const socket = io('<%= process.env.APP_URL %>');

      // handle new/live incoming message from socket
      socket.on("new_message", data => {

        // only respond if current conversation is open in any client
        if(data.message.conversation_id == current_conversation_id) {
          // message class
          const messageClass = data.message.sender.id === loggedinUserId ? 'you-message' : 'other-message';
          
          const senderAvatar = data.message.sender.avatar ? `<img src="./uploads/avatar/${data.message.sender.avatar}" alt="${data.message.sender.name}" />` : `<img src="./images/nophoto.png" alt="${data.message.sender.name}" />`;

          // message attachments
          let attachments = '<div class="attachments">';

          if(data.message.attachment && data.message.attachment.length > 0) {
            data.message.attachment.forEach(attachment => {
              attachments += `<img src="./uploads/attachments/${attachment}" /> `;
            });
          }

          attachments += '</div>';

          let messageHTML;

          // do not show avatar for loggedin user
          if(data.message.sender.id == loggedinUserId) {
            messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
              <div class="message-text">${data.message.message}</div>
              ${attachments}
              <div class="message-time">${moment(data.message.date_time).fromNow()}</div>
            </div></div>`;
          } else {
            messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
              ${senderAvatar}
              <div class="message-text">${data.message.message}</div>
              ${attachments}
              <div class="message-time">${moment(data.message.date_time).fromNow()}</div>
            </div></div>`;
          }

          // append the inoming message to message area as last item
          document.querySelector('#chat-message-list > .message-row:first-child').insertAdjacentHTML('beforeBegin', messageHTML);
        }
      });
	  
	  socket.on("delete_conversation", data => {
		//Reseting message form to prevent 
		//sending message while deleting conversation
		form.reset();

		const deletingToast = Toastify({
          text: data.message,
          duration: 1000,
        });
		deletingToast.showToast();
		location.reload();

	  });

      // get messages of a conversation
      async function getMessages(conversation_id, current_conversation_name){

        // messages failure toast
        const messagesFailureToast = Toastify({
          text: "Error loading messages!",
          duration: 1000,
        });

        let response = await fetch(`/inbox/messages/${conversation_id}`);
        const result= await response.json();

        if(!result.errors && result.data) {
			document.querySelector(".deleteConv").classList.remove("hide");

            form.style.visibility = 'visible';
            
            const {data, user, conversation_id} = result;
            participant = data.participant;
            current_conversation_id = conversation_id;

			//Preparing Delete Button 
			//adding convId to data-convId attribute
			deleteIcon.setAttribute("data-convId",`${current_conversation_id}`);
            if(data.messages) {

              let allMessages = '';

              if(data.messages.length > 0) {
                data.messages.forEach((message) => {
                  let senderAvatar = message.sender.avatar ? `./uploads/avatar/${message.sender.avatar}` : './images/nophoto.png';
                  const messageClass = message.sender.id === loggedinUserId ? 'you-message' : 'other-message';
                  const showAvatar = message.sender.id === loggedinUserId ? '' : `<img src="${senderAvatar}" alt="${message.sender.name}" />`;

                  // message attachments
                  let attachments = '<div class="attachments">';

                  if(message.attachment && message.attachment.length > 0) {
                    message.attachment.forEach(attachment => {
                      attachments += `<img src="./uploads/attachments/${attachment}" /> `;
                    });
                  }

                  attachments += '</div>';

                  // final message html
                  let messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
                      ${showAvatar}
                      <div class="message-text">${message.text}</div>
                      ${attachments}
                      <div class="message-time">${moment(message.date_time).fromNow()}</div>
                    </div></div>`;

                  allMessages += messageHTML;
                  messageContainer.innerHTML = allMessages;
                });
              } else if(data.messages.length === 0) {
                messageContainer.innerHTML = '<div class="message-row"></div>';
              }

              chatTitleContainer.textContent = current_conversation_name;
            }
        } else {
          messagesFailureToast.showToast();
        }
    }

      // message sending
      form.onsubmit = async function (event) {
        event.preventDefault();


        // prepare the form data
        const formData = new FormData(form);
        formData.append('receiverId', participant.id);
        formData.append('receiverName', participant.name);
        formData.append('avatar', participant.avatar || '');
        formData.append('conversationId', current_conversation_id);

        // send the request to server
        let response = await fetch("/inbox/message", {
          method: "POST",
          body: formData,
        });

        // get response
        let result = await response.json();

        if (!result.errors) {
          form.reset(); // reset the form
        } else {
        const sendMessageFailureToast = Toastify({
          text: result.errors.attachment.msg,
          duration: 1000,
        });
          sendMessageFailureToast.showToast();
        }
      }

	//DELETing conversation
	deleteIcon.onclick = async (e) => {
		const convId = e.target.dataset.convid;
		const res = await fetch(`/inbox/conversation/${convId}`,{
		method: "DELETE"
		});
		const result = await res.json();

		if(!result.errors)
		{
        const deleteSuccess = Toastify({
          text: "Succesfully Deleted Conversation",
          duration: 1000,
        });
		deleteSuccess.showToast();
		setTimeout(() => location.reload(),1500);
		}
		else
		{
        const deleteFailed= Toastify({
          text: `${errors.common.msg}`,
          duration: 1000,
        });
		deleteFailed.showToast();
		}
	}

	//Delete all child node
	function removeAllChild(NODE) {
		let fstElm = NODE.firstChild;
		while(fstElm)
		{
			NODE.removeChild(fstElm);
			fstElm = NODE.firstChild;
		}
	}

	//Search Conversations
	const convSearchField = document.querySelector("#search-conversation");
  //on keyup, start the countdown
  convSearchField.addEventListener("keyup", function () {
    clearTimeout(typingTimer);

    if (convSearchField.value) {
		clearSearch.style.display = "grid";
      typingTimer = setTimeout("searchConv(convSearchField.value)", doneTypingInterval); //user is "finished typing," send search request
    }
  });

  //on keydown, clear the countdown
  input.addEventListener("keydown", function () {
    clearTimeout(typingTimer);
  });

  // send request for search
  async function searchConv(convSearchFieldvalue) {
    let response = await fetch("/inbox/search/conversation", {
      method: "POST",
      body: JSON.stringify({
        searchConv: convSearchFieldvalue,
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8",
      },
    });

    // get response
    let result = await response.json();

    // handle error and response
    if (result.errors) {
	console.log(errors);

    } else {
      if (result.data.length > 0) {
		removeAllChild(conversation_list);


		let foundConvsElements = "";
		result.data.forEach(conv => {
		 if(conv.creator.id === loggedinUserId)
		 {
			 foundConvsElements += `<div class="conversation" onclick="getMessages('${conv._id}', '${conv.participant.name}')"> <img src="${conv.participant.avatar ? `./uploads/avatar/${conv.participant.avatar}` : "/images/nophoto.png"}" /> <div class="title-text">${conv.participant.name}</div> <div class="conversation-date">${moment(conv.createdAt).fromNow()}</div> </div>`
		 }
		 else{
			 foundConvsElements += `<div class="conversation" onclick="getMessages('${conv._id}', '${conv.creator.name}')"> <img src="${conv.creator.avatar ? `./uploads/avatar/${conv.creator.avatar}` : "/images/nophoto.png"}" /> <div class="title-text">${conv.creator.name}</div> <div class="conversation-date">${moment(conv.createdAt).fromNow()}</div> </div>`

		 }
				});
				conversation_list.innerHTML = foundConvsElements;

      }
    }
  }

	function clearSearchResults(loggedUserName) {
		const hideClearButton = () => {
			clearSearch.style.display = "none"
			convSearchField.value = "";
		};
		hideClearButton();
		searchConv(loggedUserName);
	}


    </script>
	<%- include('./partials/footer.ejs'); %>
  </body>
</html>

